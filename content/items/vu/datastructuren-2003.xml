<?xml version="1.0" encoding="UTF-8"?>

<item>
    <id>site:vu:datastructuren-2003</id>
    <title>Datastructuren 2003</title>
    <language>en</language>
    <last-change>2003-12-10</last-change>
    <content>


<h1>Interpreter excercise</h1>


<p>
For the Datastructuren course late 2003 a simple interpreter had to be
written in Java. The language to interpret is a simple mathematical language
with element and collection datatypes and some basic operations on
collections.
</p>

<p>
<a href="files/vu/datastructuren/opgave_2.pdf">Download exercise
description</a> (Dutch) (pdf 20Kb)
</p>

<p>
I decided to write a similar interpreter in Python using <a
href="http://systems.cs.uchicago.edu/ply/" external="true">PLY
(Python Lex-Yacc)</a>: DSInterpret. Suprisingly, it took me only a couple of
hours to write the interpreter. Of course, the Java interpreter has to be
written without a parser-generator, so DSInterpret is by no means to be
considered a solution to the excercise, rather an alternative approach.
</p>

<p>
The Python source is available under the <a
href="http://www.gnu.org/copyleft/gpl.html" external="true">GPL license</a>.
</p>

<p><strong>*update*</strong></p>

<p>
I decided to give this yet another go by writing a similar interpreter in
Java using the <a href="http://www.sablecc.org" external="true">SableCC</a>
parser generator. This became SableDS (naming this version DSInterpret too
would make things unneccesarily complicated).
</p>

<p>
SableCC turns out to be a briljant tool. From grammar rules in some extended
BNF form it generates Java code for a parser. The parser generates a
strongly typed syntax tree for which default tree walker classes are
generated by SableCC. To attach actions to nodes of the tree, you can extend
the tree walker classes and override relevant methods.
</p>

<p>
The Java source code of SableDS is also licensed under the <a
href="http://www.gnu.org/copyleft/gpl.html" external="true">GPL</a>. It
contains some helper classes for the interpreter that were written by <a
href="http://www.cs.vu.nl/~lmbronwa/" external="true">Laurens Bronwasser</a>
and me for the Datastructuren course. These classes are available under the
<a href="http://www.gnu.org/copyleft/gpl.html" external="true">GPL</a> as
well with his permission.
</p>

<p>
For instructions on downloading and running SableDS skip to the lower half
of this page.
</p>

<p>
DSInterpret and SableDS have little to do with the Datastructuren course,
but I think I'll keep this information here on this page. The language as
implemented by both DSInterpret and SableDS is very simple, in fact it's
close to useless. But I think it has now given me a nice introduction to
parsing techniques.
</p>


<h1>Downloading DSInterpret</h1>


<p>
You will need the PLY lex and yacc implementations for Python. Place lex.py
and yacc.py in the same directory as DSInterpret. PLY is free software and
licensed under the Lesser GPL (LGPL).
</p>

<p>
<a href="http://systems.cs.uchicago.edu/ply/" external="true">Download
PLY</a> (You need lex.py and yacc.py)
</p>

<p>
DSInterpret consists of 4 files, 3 of which are mandatory, namely tokens.py
(token definitions for lex), grammar.py (BNF grammar definition for yacc),
and ds_interpret.py (the main program). Some sample commands are included in
the ds_commands file. You can download these files one at a time or all in a
gzipped archive.
</p>

<ul>
    <li>
        <p>
        <a href="files/vu/datastructuren/ds_interpret.tar.gz">DSInterpret
        0.2</a> (tar.gz 3Kb)
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/ds_interpret.py">ds_interpret.py</a>
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/tokens.py">tokens.py</a>
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/grammar.py">grammar.py</a>
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/ds_commands.txt">ds_commands</a>
        </p>
    </li>
</ul>


<h1>Running DSInterpret</h1>


<p>
After downloading the files listed above, read the comments in
ds_interpret.py for instructions on how to run DSInterpret.
</p>

<p>
If you have shell access to the cs.vu.nl network, you can run DSInterpret
directly from my userdir (without having to download it first) like this:
</p>

<pre>
$ /home/mvermaat/public/bin/ds_interpret
</pre>

<p>
This will start the interactive interpreter, prompting you for input. To let
DSInterpret interpret a file with commands, specify the location of the file
as an argument:
</p>

<pre>
$ /home/mvermaat/public/bin/ds_interpret your_file
</pre>

<p>
The file ds_commands with some sample commands is also located in my
<code>/public/bin</code> directory.
</p>


<h1>Downloading SableDS</h1>


<p>
You can download the complete SableDS source code in an archive. The grammar
file for use with SableCC is included, but can also be dowloaded
seperately. The same goes for the main SableDS source file, SableDS.java
(contains most interesting code).
</p>

<p>
To use SableDS after downloading the source code, you don't need SableCC,
because I included the classes it generates after running it on the grammar
file.
</p>

<ul>
    <li>
        <p>
        <a href="files/vu/datastructuren/sable_ds.tar.gz">SableDS 0.1</a>
        (tar.gz 25Kb)
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/SableDS.java">SableDS.java</a>
        </p>
    </li>
    <li>
        <p>
        <a href="files/vu/datastructuren/sable_ds.grammar"
         >sable_ds.grammar</a>
        </p>
    </li>
</ul>


<h1>Running SableDS</h1>


<p>
Extract the source code from the archive you downloaded and compile it:
</p>

<pre>
$ javac SableDS.java
</pre>

<p>
You can now interpret a file by running SableDS from that directory with the
filename as argument:
</p>

<pre>
$ java SableDS filename
</pre>

<p>
If you have shell access to the cs.vu.nl network, you can run SableDS
directly from my userdir (without having to download it first) like this:
</p>

<pre>
$ /home/mvermaat/public/bin/sable_ds filename
</pre>

<p>
This will interpret the file supplied as argument. For more information, you
can use the <code>-info</code> option:
</p>

<pre>
$ /home/mvermaat/public/bin/sable_ds -info
</pre>


<h1>Excercise 3 - SortUniq</h1>


<p>
Third excercise for the Datastructuren 2003 course was to write a program in
Java that implements the following UNIX command for only 'identifiers' in
the given files:
</p>

<pre>
$ sort [options] &lt;files&gt; | uniq
</pre>

<p>
You can read the <a href="files/vu/datastructuren/opgave_3.txt">complete
excercise description</a> in Dutch.
</p>

<p>
To have a quick reference for testing our solution, I made up two simple
one-liners that more or less implement the excercise. Of course, they're no
valid solution, they're not in Java, and they most certainly don't advocate
good programming style. But I guessed someone taking this course might find
these references usefull.
</p>

<p>
First one is in Perl, case insensitive (get rid of the <code>lc</code> to
make it case sensitive):
</p>

<pre>
while(&lt;&gt;){ while(/(?&lt;![a-z0-9])([a-z][a-z0-9]*)/ig){ $x{lc$1}=1 } }map {print "$_\n"} sort keys %x
</pre>

<p>
Input is expected to be on <code>stdin</code>; here's a usage example:
</p>

<pre>
$ perl -e 'while(&lt;&gt;){ while(/(?&lt;![a-z0-9])([a-z][a-z0-9]*)/ig){$x{lc$1}=1 } } map {print "$_\n"} sort keys %x' &lt; File.java
</pre>

<p>
A posible solution in Bash with <code>sed</code>, <code>sort</code>, and
<code>uniq</code> is a bit shorter:
</p>

<pre>
$ sed s/[^a-z0-9][^a-z0-9]*/\\n/ig &lt; File.java | tr A-Z a-z | grep "^[a-z]" | sort | uniq
</pre>

<p>
To make this case sensitive, remove the pipe through <code>tr</code> and add
the <code>-i</code> option to the <code>grep</code> call.
</p>

<p>
This is known to work with GNU sed version 4.0.3 on Solaris. On the cs.vu.nl
network, this is located at <code>/net/public1/bin/sed</code>. However,
another version of sed can be found in <code>/usr/bin/sed</code> which does
not support the <code>/i</code> modifier and the newline character in the
substitution, so some changes will have to be made to make it work with
<code>/usr/bin/sed</code>.
</p>

<p>
A descending sort is left as an excercise to the reader.
</p>


    </content>
</item>
