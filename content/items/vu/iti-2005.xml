<?xml version="1.0" encoding="UTF-8"?>

<item>
    <id>site:vu:iti-2005</id>
    <title>Inleiding Theoretische Informatica 2005</title>
    <language>nl</language>
    <last-change>2005-03-28</last-change>
    <content>


<p>
Samen met <a href="http://www.cs.vu.nl/~jrnederp/" external="true">Joris
Nederpelt Lazarom</a> ben ik dit jaar practicum assistent bij het vak <a
href="http://www.cs.vu.nl/~tcs/iti/" external="true">Inleiding Theoretische
Informatica</a> voor tweedejaars studenten Informatica.
</p>

<p>
Het vak bestaat uit drie onderdelen: equationele logica (4 weken), Lambda
calculus (5 weken) en functioneel programmeren (2 weken).
</p>


<h1>Equationele logica</h1>


<p>
Omdat dit onderdeel in 2005 voor het eerst gegeven wordt is er besloten
enkele voorbeeld tentamenopgaven met antwoorden en enkele instructieve
uitwerkingen van opgaven uit het dictaat online te zetten.
</p>

<p>
Deze zullen waarschijnlijk binnenkort (al dan niet in gewijzigde vorm)
verschijnen op de <a href="http://www.cs.vu.nl/~tcs/iti/"
external="true">homepage van ITI</a>. Tot die tijd is dit onofficieel en
is het mogelijk dat er zich fouten of onvolkomenheden in de uitwerkingen
bevinden ;-).
</p>

<ul>
<li>
<a href="files/vu/iti/el/voorbeeld-tentamen-2005.pdf">Voorbeeld
tentamenopgaven</a> (pdf)
</li>
<li>
<a href="files/vu/iti/el/voorbeeld-antwoorden-2005.pdf">Antwoorden bij
voorbeeld tentamenopgaven</a> (pdf)
</li>
</ul>

<ul>
<li>
<a href="files/vu/iti/el/opgave5.5.pdf">Uitwerking van opgave 5.5 uit het
dictaat</a> (pdf) (uitgedeeld op het werkcollege)
</li>
<li>
<a href="http://www.cs.vu.nl/~tcs/iti/avi-opg66.ps"
external="true">Uitwerking van opgave 6.4 uit het dictaat</a> (ps)
(uitgedeeld op het werkcollege)
</li>
<li>
<a href="files/vu/iti/el/voorbeeld-uitwerkingen-2005.pdf">Voorbeeld
uitwerkingen bij opgaven uit het dictaat</a> (pdf)
</li>
</ul>

<p>
(Bovenstaande uitwerking bij opgave 6.4 komt niet van mij, maar
vermoedelijk van Roel de Vrijer of Yde Venema.)
</p>


<h1>Lambda calculus</h1>


<h2>ASF+SDF Meta Environment</h2>


<p>
Het <a href="http://www.cwi.nl/htbin/sen1/twiki/bin/view/SEN1/MetaEnvironment"
external="true">ASF+SDF Meta Environment</a> is een uitgebreid systeem
waarin je onder andere op basis van algebraische specificaties (dus de
specificaties die we in het eerste deel van ITI behandeld hebben) termen
kunt laten herschrijven.
</p>

<p>
Op mijn website kun je een <a href="asfsdf-lambda-calculus">specificatie van
Lambda calculus</a> voor het ASF+SDF Meta Environment vinden. Daarmee kun je
de structuur van Lambda termen analyseren en ze doormiddel van herschrijven
naar normaalvorm laten reduceren.
</p>

<p>
Het ASF+SDF Meta Environment is op dit moment niet beschikbaar op de
systemen in de computerzalen. Onder Linux en Solaris is het echter vrij
gemakkelijk te installeren. Voor vragen kun je altijd bij mij terecht.
</p>


<h2>Britney</h2>


<p>
Om te oefenen met de structuur van Lambda termen en reductie heb ik ooit
<a href="britney">Britney</a> geschreven. Britney kan termen in boomvorm
afdrukken, termen reduceren en termen vergelijken modulo alpha
conversie.
</p>


<h1>Functioneel programmeren</h1>


<p>
Bij het practicum functioneel programmeren zullen we de taal <a
href="http://caml.inria.fr/ocaml/index.html" external="true">Objective
Caml</a> gebruiken. Voor iedereen met een Java achtergrond is deze<a
href="http://merjis.com/developers/ocaml_tutorial/"
external="true">OCaml Tutorial</a> voor C(++), Perl en Java programmeurs
een aardige introductie in de taal.
</p>

<p>
Is Emacs je favoriete editor dan heb je geluk. In mijn home directory heb
ik een OCaml mode voor Emacs gezet, <a
href="http://www-rocq.inria.fr/~acohen/tuareg/" external="true">Tuareg
Mode</a>, die ik iets fijner vind werken dan de OCaml mode die standaard
bij de OCaml distributie zit.
</p>

<p>
Je kunt Tuareg Mode automatisch laten activeren bij het openen van OCaml
files door het toevoegen van de volgende regels aan je
<code>~/.emacs</code> file:
</p>

<pre>
;; Where do we look for tuareg?
(setq load-path (cons "~mvermaat/public/tuareg_mode/" load-path))

;; OCaml tuareg mode
(setq auto-mode-alist (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)

;; Look in ~mvermaat/public/tuareg_mode/custom-tuareg.el for some ideas on
;; customization options.
</pre>


    </content>
</item>
